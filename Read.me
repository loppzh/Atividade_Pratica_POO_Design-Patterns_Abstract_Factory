üß© Atividade Pr√°tica 04 ‚Äî Padr√£o de Projeto Abstract Factory

Este reposit√≥rio cont√©m a resolu√ß√£o da Atividade Pr√°tica 04 da disciplina Programa√ß√£o Orientada a Objetos 2.
O objetivo foi implementar, em Python, o padr√£o de projeto criacional Abstract Factory, com base em tr√™s diagramas de classes UML distintos.

üè´ Informa√ß√µes da Atividade

Institui√ß√£o: Instituto Federal Catarinense (IFC) ‚Äî Campus Araquari

Curso: Bacharelado em Sistemas de Informa√ß√£o

Disciplina: Programa√ß√£o Orientada a Objetos 2

Professor: Paulo Cesar Fernandes de Oliveira, BSc, PhD

O desafio consistiu em traduzir os diagramas UML fornecidos em c√≥digo Python funcional e idiom√°tico, aplicando corretamente os conceitos do padr√£o Abstract Factory.

Benef√≠cios:

Desacoplamento: elimina condicionais e depend√™ncias diretas entre o cliente e as classes concretas.

Consist√™ncia: garante que todos os objetos criados perten√ßam √† mesma fam√≠lia, evitando combina√ß√µes incorretas (por exemplo, uma ClassicChair com uma ScandinavianTable).

‚öôÔ∏è Estrutura da Implementa√ß√£o

A solu√ß√£o em Python utiliza o m√≥dulo abc (Abstract Base Classes) para definir interfaces e abstra√ß√µes.
O c√≥digo segue os quatro componentes principais do padr√£o:

AbstractFactory (F√°brica Abstrata)
Define a interface para as f√°bricas, com m√©todos como create_product_A() e create_product_B().

Exemplo: FurnitureFactory, Corporation.

ConcreteFactory (F√°brica Concreta)
Implementa a interface da f√°brica abstrata e sabe como criar os produtos de uma fam√≠lia espec√≠fica.

Exemplo: ScandinavianFactory, ClassicFactory, FutureVehicleCorporation.

AbstractProduct (Produto Abstrato)
Define a interface comum para cada tipo de produto.

Exemplo: AbstractChair, AbstractDiningTable, ElectricVehicle.

ConcreteProduct (Produto Concreto)
Implementa os produtos espec√≠ficos pertencentes a uma fam√≠lia.

Exemplo: ScandinavianChair, ClassicChair, NextGenElectricCar.

O cliente (as fun√ß√µes client_program) interage apenas com as interfaces abstratas, tornando simples a troca da fam√≠lia de produtos sem alterar o c√≥digo cliente.

üìÇ Exerc√≠cios Implementados

O arquivo principal (seu_arquivo.py) cont√©m as solu√ß√µes para tr√™s exerc√≠cios baseados em diferentes diagramas UML:

F√°brica de M√≥veis: cria fam√≠lias de m√≥veis (Arm√°rio, Cadeira, Mesa de Jantar) nos estilos Escandinavo, Cl√°ssico e Contempor√¢neo.

F√°brica de Ve√≠culos: cria fam√≠lias de ve√≠culos (a motor e el√©tricos) para diferentes corpora√ß√µes (FutureVehicle e NextGen).

F√°brica de Equipamentos: cria fam√≠lias de equipamentos (Arma e Armadura) para diferentes classes de jogo (Melee, Ranged e Magic).

üí° Principais Aprendizados

Esta atividade foi essencial para consolidar o entendimento sobre padr√µes de projeto e o papel da abstra√ß√£o na arquitetura de software.

Desacoplamento e Abstra√ß√£o: o cliente opera em um alto n√≠vel, sem conhecer as implementa√ß√µes concretas.

Extensibilidade: novos estilos ou fam√≠lias podem ser adicionados sem modificar o c√≥digo existente ‚Äî aplicando o Princ√≠pio Aberto/Fechado (Open/Closed) do SOLID.

Consist√™ncia entre produtos: o padr√£o garante compatibilidade entre objetos da mesma fam√≠lia.

Uso de abc no Python: refor√ßou o uso de ABC e @abstractmethod para criar contratos claros entre classes.